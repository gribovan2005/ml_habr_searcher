services:
  postgres_articles:
    image: postgres:15
    container_name: habr_postgres_articles
    environment:
      POSTGRES_DB: habr_articles_db
      POSTGRES_USER: habr_user
      POSTGRES_PASSWORD: habr_pass
    ports:
      - "5433:5432"
    volumes:
      - postgres_articles_data:/var/lib/postgresql/data
      - ./src/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    restart: unless-stopped
    networks:
      - habr_network

  postgres_airflow:
    image: postgres:15
    container_name: habr_postgres_airflow
    environment:
      POSTGRES_DB: airflow_db
      POSTGRES_USER: airflow_user
      POSTGRES_PASSWORD: airflow_pass
    ports:
      - "5434:5432"
    volumes:
      - postgres_airflow_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - habr_network

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: habr_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    restart: unless-stopped
    networks:
      - habr_network

  redis:
    image: redis:7-alpine
    container_name: habr_redis
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - habr_network

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: habr_api
    ports:
      - "8000:5000"
    environment:
      - DB_HOST=postgres_articles
      - DB_PORT=5432
      - DB_NAME=habr_articles_db
      - DB_USER=habr_user
      - DB_PASSWORD=habr_pass
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    depends_on:
      - postgres_articles
      - elasticsearch
      - redis
    restart: unless-stopped
    networks:
      - habr_network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: habr_frontend
    ports:
      - "3000:80"
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - habr_network

  airflow-init:
    build:
      context: .
      dockerfile: airflow/Dockerfile
    container_name: habr_airflow_init
    environment:
      - AIRFLOW_UID=50000
      - AIRFLOW_GID=0
      - DB_HOST=postgres_articles
      - DB_PORT=5432
      - DB_NAME=habr_articles_db
      - DB_USER=habr_user
      - DB_PASSWORD=habr_pass
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow_user:airflow_pass@postgres_airflow/airflow_db
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=true
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW_ADMIN_PASSWORD=${AIRFLOW_ADMIN_PASSWORD:-admin}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
      - ./src:/opt/airflow/src
      - ./data:/opt/airflow/data
    command: airflow db init && airflow users create --username admin --firstname Admin --lastname User --role Admin --email admin@example.com --password "$${AIRFLOW_ADMIN_PASSWORD}"
    depends_on:
      - postgres_airflow
      - postgres_articles
    networks:
      - habr_network

  airflow-webserver:
    build:
      context: .
      dockerfile: airflow/Dockerfile
    container_name: habr_airflow_webserver
    ports:
      - "8080:8080"
    environment:
      - AIRFLOW_UID=50000
      - AIRFLOW_GID=0
      - DB_HOST=postgres_articles
      - DB_PORT=5432
      - DB_NAME=habr_articles_db
      - DB_USER=habr_user
      - DB_PASSWORD=habr_pass
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow_user:airflow_pass@postgres_airflow/airflow_db
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=true
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW_ADMIN_PASSWORD=${AIRFLOW_ADMIN_PASSWORD:-admin}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
      - ./src:/opt/airflow/src
      - ./data:/opt/airflow/data
    command: airflow webserver
    restart: unless-stopped
    depends_on:
      - postgres_airflow
      - postgres_articles
      - airflow-init
    networks:
      - habr_network

  airflow-scheduler:
    build:
      context: .
      dockerfile: airflow/Dockerfile
    container_name: habr_airflow_scheduler
    environment:
      - AIRFLOW_UID=50000
      - AIRFLOW_GID=0
      - DB_HOST=postgres_articles
      - DB_PORT=5432
      - DB_NAME=habr_articles_db
      - DB_USER=habr_user
      - DB_PASSWORD=habr_pass
      - ES_HOST=elasticsearch
      - ES_PORT=9200
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow_user:airflow_pass@postgres_airflow/airflow_db
      - AIRFLOW__CORE__FERNET_KEY=46BKJoQYlPPOexq0OhDZnIlNepKFf87WFwLbfzqDDho=
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=true
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=true
      - AIRFLOW_ADMIN_PASSWORD=${AIRFLOW_ADMIN_PASSWORD:-admin}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
      - ./src:/opt/airflow/src
      - ./data:/opt/airflow/data
    command: airflow scheduler
    restart: unless-stopped
    depends_on:
      - postgres_airflow
      - postgres_articles
      - airflow-init
    networks:
      - habr_network


  prometheus:
    image: prom/prometheus:latest
    container_name: habr_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - habr_network

  grafana:
    image: grafana/grafana:latest
    container_name: habr_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - habr_network

volumes:
  postgres_articles_data:
  postgres_airflow_data:
  postgres_mlflow_data:
  elasticsearch_data:
  mlflow_artifacts:
  prometheus_data:
  grafana_data:

networks:
  habr_network:
    driver: bridge